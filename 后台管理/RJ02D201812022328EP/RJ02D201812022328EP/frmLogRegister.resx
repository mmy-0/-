<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAUAAAAaAAAAHgAAAB0AAAAdAAAAHQAAAB0AAAAdAAAAHQAAAB0AAAAdAAAAHQAAAB0AAAAeAAAAGgAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAWgAAANcAAADWAAAA1gAAANYAAADWAAAA1gAAANYAAADWAAAA1gAAANYAAADWAAAA1gAA
        ANYAAADXAAAAVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAABoAAADFAAAAigAAAD4AAABBAAAAQQAAAEEAAABBAAAAQQAAAEEAAABBAAAAQQAA
        AEEAAABBAAAAPwAAAIwAAADDAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAeQAAAMcAAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAHQAAAMkAAAB2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACsAAADXAAAAWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXQAAANYAAAApAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAmQAAAK8AAAALAAAAAAAAAAAAAAAAAAAAAAYG
        BgAAAAAAAgICBgICAgUCAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAsQAAAJcAAAAFAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQAAADZAAAAQQAAAAAAAAAAAAAAAAUF
        BQACAgIAAgICCgICAkUCAgKuAgICpQICAjoCAgIHAgICAAAAAAAAAAAAAAAAAAAAAAAAAABDAAAA2QAA
        AEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAuAAAAJYAAAAEAAAAAAAA
        AAACAgIAAwMDCgICAkUCAgKwAgIC1gICApwCAgKjAgIC1gICAqQCAgI7AgICBwICAgAAAAAAAAAAAAAA
        AAQAAACZAAAAtgAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQAAADTAAAAJQAA
        AAACAgIAAwMDCAICAkkCAgKsAgIC2QICApQCAgItAgICFwICAhUCAgI3AgICngICAtsCAgKgAgICPgIC
        AgUCAgIAAAAAAAAAACcAAADUAAAAYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAyQAA
        AHEBAQEAAwMDAgICAkcCAgKsAgIC4QICApACAgIxAgICFgICAm4CAgLGAgICvwICAmICAgITAgICOQIC
        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
        AJkAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ADEAAADVAAAAWgAAAA8AAAARAAAAEQAAABEAAAARAAAAEQAAABEAAAARAAAAEQAAABEAAAARAAAADwAA
        AFwAAADUAAAALwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAH4AAADoAAAAzgAAAM4AAADOAAAAzgAAAM4AAADOAAAAzgAAAM4AAADOAAAAzgAA
        AM4AAADOAAAA6AAAAHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAGEAAABqAAAAaQAAAGkAAABpAAAAaQAAAGkAAABpAAAAaQAA
        AGkAAABpAAAAaQAAAGoAAABgAAAAFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////wAA//8AAP/+AAB//j/8f/x//j/4fn4f+PgfH/Dg
        Bw/xgAGP4gAAR8IAAEfHAADjhgAAYY4AAHHHgAHjwgAAQ+IAAEfhgAGP8cAHj/jwDx/4fD4f/H/+P/w/
        /D/+AAB//wAA//8AAP////////////////8=
</value>
  </data>
</root>